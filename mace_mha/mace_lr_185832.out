/trace/group/mcgaughey/hariharr/miniconda3/envs/mace/lib/python3.9/site-packages/e3nn/o3/_wigner.py:10: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  _Jd, _W3j_flat, _W3j_indices = torch.load(os.path.join(os.path.dirname(__file__), 'constants.pt'))
/trace/group/mcgaughey/hariharr/mace_exploration/fourier_attention_mace/mace_mha/mace/calculators/mace.py:128: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  torch.load(f=model_path, map_location=device)
/trace/group/mcgaughey/hariharr/mace_exploration/fourier_attention_mace/mace_mha/plot_binding_curve.py:78: DeprecationWarning: Please use atoms.calc = calc
  all_list[i].set_calculator(calculator)
dimer type and id: 5 PP
count_atom_types from ground truth: [13.  7.  3.  1.]
ground state dft energies: {1: -797.043982680611, 6: -429.1775291357141, 7: -183.93322677244873, 8: -61.31107559081626} -13978.925234706103
No dtype selected, switching to float64 to match model dtype.
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
energy graph: torch.Size([1]) torch.Size([24])
energy graph: torch.Size([1]) torch.Size([24])
qkv: torch.Size([24, 4, 192]) torch.Size([24, 3])
mha vectors after split: torch.Size([4, 24, 64]) torch.Size([4, 24, 64]) torch.Size([4, 24, 64])
flattened vector: torch.Size([96, 64]) torch.Size([96, 64]) torch.Size([96, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from value or key: torch.Size([4, 24, 64, 983]) torch.Size([96, 64, 8, 15, 15]) torch.Size([4, 983, 64])
num_heads and n: 4 96
k_vectors, q_expanded and eikx_expanded shape: torch.Size([983, 3]) torch.Size([96, 64, 1, 1, 1]) torch.Size([96, 8, 1, 1]) torch.Size([96, 1, 15, 1]) torch.Size([96, 1, 1, 15])
value from optimized ewald sum: torch.Size([96, 64, 8, 15, 15])
term from query: torch.Size([96, 64, 983]) torch.Size([96, 64, 8, 15, 15])
efficient implementation q_pot: torch.Size([4, 24, 64, 983]) torch.Size([4, 983, 64]) torch.Size([4, 983, 64])
efficient_weighted_values: torch.Size([24, 983, 256])
optimized_inverse: torch.Size([24, 3]) torch.Size([24, 3])
mesh grid shape: torch.Size([8, 15, 15]) torch.Size([8, 15, 15]) torch.Size([8, 15, 15])
valid_k: torch.Size([8, 15, 15])
shapes of q: torch.Size([24, 983, 256]) True
new_sum_term: torch.Size([24, 256]) 24
weighted_values after ift: torch.Size([24, 256])
results: torch.Size([24, 256])
count_atom_types from mace: [13.  7.  3.  1.]
mace_avge0: {1: -797.043713022077, 6: -429.17738393496506, 7: -183.93316454355627, 8: -61.311054847852105} -13978.920505310278
finished plotting
